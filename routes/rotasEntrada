// entrada.js (Backend)

const express = require("express");
const router = express.Router();
const mysql = require("../mysql").pool;

// Rota para cadastrar uma entrada de produto
router.post("/", (req, res) => {
    const { id_produto, qtde, valor_unitario, data_entrada } = req.body;

    // Verifica se todos os campos obrigatórios estão presentes
    if (!id_produto || !qtde || !valor_unitario || !data_entrada) {
        return res.status(400).json({ mensagem: "Todos os campos são obrigatórios." });
    }

    // Insira os dados da entrada de produto no banco de dados MySQL
    mysql.getConnection((error, connection) => {
        if (error) {
            console.error("Erro ao obter conexão com o banco de dados:", error);
            return res.status(500).json({ mensagem: "Erro ao conectar ao banco de dados." });
        }

        connection.query(
            "INSERT INTO `entrada_produto`(`id_produto`, `qtde`, `valor_unitario`, `data_entrada`) VALUES (?,?,?,?)",
            [id_produto, qtde, valor_unitario, data_entrada],
            (queryError, results) => {
                connection.release(); // Libera a conexão para o pool

                if (queryError) {
                    console.error("Erro ao cadastrar entrada de produto:", queryError);
                    return res.status(500).json({ mensagem: "Erro ao cadastrar entrada de produto." });
                }
                res.status(201).json({ mensagem: "Entrada de produto cadastrada com sucesso!" });
            }
        );
    });
});

// Rota para listar todas as entradas de produto
router.get("/", (req, res, next) => {
    mysql.getConnection((error, connection) => {
        if (error) {
            console.error("Erro ao obter conexão com o banco de dados:", error);
            return res.status(500).json({ mensagem: "Erro ao conectar ao banco de dados." });
        }

        connection.query("SELECT * FROM entrada_produto INNER JOIN produto ON entrada_produto.id_produto = produto.id", (queryError, rows) => {
            connection.release(); // Libera a conexão para o pool

            if (queryError) {
                console.error("Erro ao executar consulta:", queryError);
                return res.status(500).json({ mensagem: "Erro ao listar entradas de produto." });
            }

            // Remova as saídas de produtos excluídas da listagem de entradas
            rows = rows.filter(entrada => entrada.id_produto);

            res.status(200).json({
                mensagem: "Aqui estão todas as entradas de produto cadastradas",
                entradas: rows
            });
        });
    });
});

// Rota para excluir uma entrada de produto pelo ID
router.delete("/:id", (req, res, next) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ error: "Parâmetros inválidos" });
    }

    // Exclui a entrada de produto pelo ID no banco de dados MySQL
    mysql.getConnection((error, connection) => {
        if (error) {
            console.error("Erro ao obter conexão com o banco de dados:", error);
            return res.status(500).json({ mensagem: "Erro ao conectar ao banco de dados." });
        }

        connection.query("DELETE FROM entrada_produto WHERE id=?", [id], (queryError, results) => {
            if (queryError) {
                connection.release(); // Libera a conexão para o pool
                console.error("Erro ao excluir entrada de produto:", queryError);
                return res.status(500).json({ mensagem: "Erro ao excluir entrada de produto." });
            }

            // Após excluir a entrada de produto, remova-a da listagem de saídas também
            connection.query("DELETE FROM saida_produto WHERE id_produto=?", [id], (deleteError, results) => {
                connection.release(); // Libera a conexão para o pool

                if (deleteError) {
                    console.error("Erro ao excluir saída de produto associada:", deleteError);
                    return res.status(500).json({ mensagem: "Erro ao excluir saída de produto associada." });
                }

                res.status(200).json({ mensagem: "Entrada de produto excluída com sucesso!" });
            });
        });
    });
});

module.exports = router;
