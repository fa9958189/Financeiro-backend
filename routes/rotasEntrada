// Importe as dependências necessárias
const express = require("express");
const router = express.Router();
const sqlite3 = require("sqlite3").verbose();

// Crie uma instância do banco de dados
const db = new sqlite3.Database("database.db");

// Criar a tabela de entrada de produto, caso ela ainda não exista
db.run("CREATE TABLE IF NOT EXISTS entrada_produto (id INTEGER PRIMARY KEY AUTOINCREMENT, id_produto INTEGER, qtde INTEGER, valor_unitario REAL, data_entrada DATE)", (createTableError) => {
    if (createTableError) {
        console.error("Erro ao criar tabela de entrada de produto:", createTableError.message);
    }
});

// Rota para cadastrar uma entrada de produto
router.post("/", (req, res) => {
    const { id_produto, qtde, valor_unitario, data_entrada } = req.body;

    // Verifica se todos os campos obrigatórios estão presentes
    if (!id_produto || !qtde || !valor_unitario || !data_entrada) {
        return res.status(400).json({ mensagem: "Todos os campos são obrigatórios." });
    }

    // Insira os dados da entrada de produto no banco de dados
    db.run(
        "INSERT INTO entrada_produto (id_produto, qtde, valor_unitario, data_entrada) VALUES (?, ?, ?, ?)",
        [id_produto, qtde, valor_unitario, data_entrada],
        function (error) {
            if (error) {
                console.error("Erro ao cadastrar entrada de produto:", error.message);
                return res.status(500).json({ mensagem: "Erro ao cadastrar entrada de produto. " + error.message });
            }
            atualizarEstoque(id_produto, qtde, valor_unitario);
            res.status(201).json({ mensagem: "Entrada de produto cadastrada com sucesso!" });
        }
    );
});

// Rota para listar todas as entradas de produto
router.get("/", (req, res, next) => {
    db.all("SELECT * FROM entrada_produto INNER JOIN produto ON entrada_produto.id_produto = produto.id", (error, rows) => {
        if (error) {
            return res.status(500).send({
                error: error.message
            });
        }
        
        // Remova as saídas de produtos excluídas da listagem de entradas
        rows.forEach((entrada, index) => {
            if (!entrada.id_produto) {
                rows.splice(index, 1);
            }
        });

        res.status(200).send({
            mensagem: "Aqui estão todas as entradas de produto cadastradas",
            entradas: rows
        });
    });
});


// Rota para excluir uma entrada de produto pelo ID
router.delete("/:id", (req, res, next) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).send({ error: "Parâmetros inválidos" });
    }

    db.run("DELETE FROM entrada_produto WHERE id=?", id, (error) => {
        if (error) {
            return res.status(500).send({
                error: error.message
            });
        }

        // Após excluir a entrada de produto, remova-a da listagem de saídas também
        db.run("DELETE FROM saida_produto WHERE id_produto=?", id, (error) => {
            if (error) {
                return res.status(500).send({
                    error: error.message
                });
            }

            res.status(200).send({ mensagem: "Entrada de produto excluída com sucesso!" });
        });
    });
});


function atualizarEstoque(id_produto, qtde, valor_unitario) {
    db.all('SELECT * FROM estoque WHERE id_produto=?', [id_produto], (error, rows) => {
        if (error) {
            console.error("Erro ao consultar estoque:", error.message);
            return; // Saia da função se houver um erro
        }

        if (rows.length > 0) {
            console.log("tem dados, alterar os dados");
            // Se houver uma entrada de produto para o mesmo id_produto, atualize os dados
            db.run(
                "UPDATE entrada_produto SET qtde=?, valor_unitario=? WHERE id_produto=?",
                [qtde, valor_unitario, id_produto],
                function (error) {
                    if (error) {
                        console.error("Erro ao atualizar entrada de produto:", error.message);
                        return; // Saia da função se houver um erro
                    }
                    console.log("Entrada de produto atualizada com sucesso!");
                }
            );
        } else {
            console.log("não tem dados, inserir os dados");
            // Se não houver uma entrada de produto para o mesmo id_produto, insira uma nova entrada
            db.run(
                "INSERT INTO entrada_produto (id_produto, qtde, valor_unitario, data_entrada) VALUES (?, ?, ?, CURRENT_DATE)",
                [id_produto, qtde, valor_unitario],
                function (error) {
                    if (error) {
                        console.error("Erro ao cadastrar entrada de produto:", error.message);
                        return; // Saia da função se houver um erro
                    }
                    console.log("Entrada de produto cadastrada com sucesso!");
                }
            );
        }
    });
}

module.exports = router;
