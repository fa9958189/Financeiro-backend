const express = require("express");
const router = express.Router();
const mysql = require("../mysql").pool;

// Rota para cadastrar um orçamento
router.post("/", (req, res) => {
    const { id_produto, quantidade, valor_unitario, total } = req.body;

    // Verifica se todos os campos obrigatórios estão presentes
    if (!id_produto || !quantidade || !valor_unitario || !total) {
        return res.status(400).json({ mensagem: "Todos os campos são obrigatórios." });
    }

    // Insira os dados do orçamento no banco de dados
    mysql.query(
        "INSERT INTO orcamento (id_produto, quantidade, valor_unitario, total) VALUES (?, ?, ?, ?)",
        [id_produto, quantidade, valor_unitario, total],
        (error, results, fields) => {
            if (error) {
                console.error("Erro ao cadastrar orçamento:", error.message);
                return res.status(500).json({ mensagem: "Erro ao cadastrar orçamento. " + error.message });
            }
            res.status(201).json({ mensagem: "Orçamento cadastrado com sucesso!" });
        }
    );
});



const handleSelectClient = (clientId) => {
    setSelectedClientId(clientId);
    // Verificar se foi selecionado um cliente
    if (clientId) {
      // Chamar a API para buscar as informações do cliente
      fetch(`http://localhost:5000/cliente/${clientId}`)
        .then(response => response.json())
        .then(data => {
          // Definir as informações do cliente selecionado
          setSelectedClientInfo(data.cliente);
        })
        .catch(error => console.error('Erro ao buscar informações do cliente:', error));
    } else {
      // Limpar as informações do cliente selecionado se nenhum cliente for selecionado
      setSelectedClientInfo(null);
    }
  };

  

// Rota para excluir um orçamento pelo número sequencial
router.delete("/:id", (req, res) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ error: "ID inválido" });
    }

    mysql.query("DELETE FROM orcamento WHERE id=?", [id], (error, results, fields) => {
        if (error) {
            return res.status(500).json({ error: error.message });
        }

        res.status(200).json({ mensagem: "Orçamento excluído com sucesso!" });
    });
});



// Rota para buscar informações de um cliente pelo ID
router.get("/:id", (req, res) => {
    const { id } = req.params;

    // Verifica se o ID do cliente foi fornecido
    if (!id) {
        return res.status(400).json({ error: "ID do cliente não fornecido" });
    }

    // Consulta o banco de dados para obter as informações do cliente com base no ID
    mysql.query("SELECT * FROM cliente WHERE id=?", [id], (error, results, fields) => {
        if (error) {
            return res.status(500).json({ error: error.message });
        }

        if (results.length === 0) {
            return res.status(404).json({ error: "Cliente não encontrado" });
        }

        const cliente = results[0];
        res.status(200).json({ cliente });
    });
});

// Rota para listar todos os orçamentos
router.get("/", (req, res) => {
    mysql.query(`SELECT  
    
    orcamento.id as id,
    orcamento.id_produto as id_produto, 
    orcamento.quantidade as quantidade, 
    orcamento.valor_unitario as valor_unitario, 
    orcamento.total as total,
    produto.descricao as descricao
    FROM orcamento 
    INNER JOIN produto on
    orcamento.id_produto=produto.id
    
    `, (error, results, fields) => {
        if (error) {
            return res.status(500).json({ error: error.message });
        }

        res.status(200).json({
            mensagem: "Aqui estão todos os orçamentos cadastrados",
            orcamentos: results
        });
    });
});

module.exports = router;
