// Importe as dependências necessárias
const express = require("express");
const router = express.Router();
const mysql = require("../mysql").pool;

// Rota para cadastrar um produto
router.post("/", (req, res) => {
    const { status, descricao, estoque_minimo, estoque_maximo } = req.body;

    // Verifica se todos os campos obrigatórios estão presentes
    if (!status || !descricao || !estoque_minimo || !estoque_maximo) {
        return res.status(400).json({ mensagem: "Todos os campos são obrigatórios." });
    }

    // Insira os dados do produto no banco de dados
    mysql.query(
        "INSERT INTO produto (status, descricao, estoque_minimo, estoque_maximo) VALUES (?, ?, ?, ?)",
        [status, descricao, estoque_minimo, estoque_maximo],
        (error, results, fields) => {
            if (error) {
                console.error("Erro ao cadastrar produto:", error.message);
                return res.status(500).json({ mensagem: "Erro ao cadastrar produto. " + error.message });
            }
            res.status(201).json({ mensagem: "Produto cadastrado com sucesso!" });
        }
    );
});

// Rota para listar todos os produtos
router.get("/", (req, res) => {
    mysql.query("SELECT * FROM produto", (error, results, fields) => {
        if (error) {
            return res.status(500).json({ error: error.message });
        }
        res.status(200).json({
            mensagem: "Aqui estão todos os cadastros",
            produtos: results
        });
    });
});

// Rota para obter um produto pelo ID
router.get("/:id", (req, res) => {
    const { id } = req.params;
    mysql.query("SELECT * FROM produto WHERE id=?", [id], (error, results, fields) => {
        if (error) {
            return res.status(500).json({ error: error.message });
        }
        res.status(200).json({
            mensagem: "Aqui está o produto solicitado",
            produto: results[0]
        });
    });
});

// Rota para atualizar um produto existente
router.put("/", (req, res) => {
    const { id, status, descricao, estoque_minimo, estoque_maximo } = req.body;

    if (!id || !status || !descricao || !estoque_minimo || !estoque_maximo) {
        return res.status(400).json({ error: "Parâmetros inválidos" });
    }

    mysql.query(
        "UPDATE produto SET status=?, descricao=?, estoque_minimo=?, estoque_maximo=? WHERE id=?",
        [status, descricao, estoque_minimo, estoque_maximo, id],
        (error, results, fields) => {
            if (error) {
                return res.status(500).json({ error: error.message });
            }
            res.status(200).json({ mensagem: "Produto atualizado com sucesso!" });
        }
    );
});

// Rota para excluir um produto pelo ID
router.delete("/:id", (req, res) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ error: "Parâmetros inválidos" });
    }

    mysql.query("DELETE FROM produto WHERE id=?", [id], (error, results, fields) => {
        if (error) {
            return res.status(500).json({ error: error.message });
        }
        res.status(200).json({ mensagem: "Produto excluído com sucesso!" });
    });
});

module.exports = router;
