const express = require("express");
const router = express.Router();
const sqlite3 = require("sqlite3").verbose();

const db = new sqlite3.Database("database.db");

// Criar a tabela produto, caso ela ainda não exista
db.run("CREATE TABLE IF NOT EXISTS produto (id INTEGER PRIMARY KEY AUTOINCREMENT, status TEXT, descricao TEXT, estoque_minimo REAL, estoque_maximo REAL)", (createTableError) => {
    if (createTableError) {
        console.error("Erro ao criar tabela de produto:", createTableError.message);
    }
});

// Função para calcular o estoque atual de cada produto
const calcularEstoque = () => {
  return new Promise((resolve, reject) => {
    const query = `
      SELECT 
        p.id AS id_produto,
        p.descricao AS nome_produto,
        COALESCE(SUM(e.qtde), 0) AS entradas,
        COALESCE(SUM(s.qtde), 0) AS saidas,
        (COALESCE(SUM(e.qtde), 0) - COALESCE(SUM(s.qtde), 0)) AS quantidade_em_estoque
      FROM 
        produto p
        LEFT JOIN entrada_produto e ON p.id = e.id_produto
        LEFT JOIN saida_produto s ON p.id = s.id_produto
      GROUP BY 
        p.id, p.descricao
    `;
    db.all(query, (error, rows) => {
      if (error) {
        reject(error);
      } else {
        resolve(rows);
      }
    });
  });
};

router.get("/", async (req, res) => {
  try {
    // Calcular o estoque atual
    const estoque = await calcularEstoque();

    // Envie a resposta com os dados do estoque
    res.status(200).send({
      mensagem: "Aqui está o estoque atual",
      estoque: estoque
    });
  } catch (error) {
    // Em caso de erro, envie uma resposta com o status 500 e a mensagem de erro
    res.status(500).send({
      error: error.message
    });
  }
});

module.exports = router;
